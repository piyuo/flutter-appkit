# .github/workflows/auto-merge-to-develop.yml
name: Auto Create PR to Merge Main to Develop

on:
    push:
        branches:
            - main # This workflow triggers when new commits are pushed to 'main'

jobs:
    create-merge-pr:
        runs-on: ubuntu-latest
        # Give workflow necessary permissions
        permissions:
            contents: write # For git push
            pull-requests: write # For gh pr create/edit/comment
            issues: write # For gh issue create (on failure)

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0 # Fetch full history including tags
                  token: ${{ secrets.GITHUB_TOKEN }} # Use GITHUB_TOKEN for operations

            - name: Check if this is a squash merge from develop
              id: check-squash-merge
              run: |
                  # Get the latest commit on main
                  LATEST_COMMIT_SHA=$(git rev-parse HEAD)
                  LATEST_COMMIT_MSG=$(git log -1 --pretty=format:"%s")
                  echo "Latest commit message on main: ${LATEST_COMMIT_MSG}"
                  echo "Latest commit SHA: ${LATEST_COMMIT_SHA}"

                  # Check if this commit has only one parent (indicates squash merge or direct push)
                  PARENT_COUNT=$(git cat-file -p HEAD | grep "^parent " | wc -l)
                  echo "Parent count: ${PARENT_COUNT}"

                  # For squash merges, we typically see:
                  # 1. Only one parent (the previous main commit)
                  # 2. Commit message often contains PR information or merge indicators
                  # 3. The commit is recent (just pushed)

                  # Check various indicators that this might be a squash merge from develop
                  should_sync=false

                  # Method 1: Check if commit message indicates a merge/PR
                  if echo "$LATEST_COMMIT_MSG" | grep -iqE "(merge|pull request|pr #|#[0-9]+|from.*develop|feat|fix|chore)"; then
                    echo "✓ Commit message suggests this might be from a PR or merge"
                    should_sync=true
                  fi

                  # Method 2: Check if there are significant changes (more than just version bumps)
                  # This helps distinguish between actual feature merges and automated releases
                  CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | wc -l)
                  echo "Changed files count: ${CHANGED_FILES}"

                  if [ "$CHANGED_FILES" -gt 0 ]; then
                    echo "✓ Multiple files changed, likely a feature merge"
                    should_sync=true
                  fi

                  # Method 3: Skip if this looks like an automated release commit
                  if echo "$LATEST_COMMIT_MSG" | grep -iqE "^(chore|release).*version|^v?[0-9]+\.[0-9]+\.[0-9]+"; then
                    echo "! This looks like an automated release commit, skipping sync"
                    should_sync=false
                  fi

                  # Method 4: Check if main has diverged from develop significantly
                  git fetch origin develop
                  COMMITS_AHEAD=$(git rev-list --count origin/develop..HEAD)
                  echo "Main is ${COMMITS_AHEAD} commits ahead of develop"

                  if [ "$COMMITS_AHEAD" -gt 0 ]; then
                    echo "✓ Main has new commits that develop doesn't have"
                    should_sync=true
                  fi

                  if [ "$should_sync" = true ]; then
                    echo "should_sync=true" >> $GITHUB_OUTPUT
                    echo "🔄 Will create sync PR to merge main changes back to develop"
                  else
                    echo "should_sync=false" >> $GITHUB_OUTPUT
                    echo "⏭️ Skipping sync - this doesn't appear to be a squash merge from develop"
                  fi

            - name: Configure Git
              if: steps.check-squash-merge.outputs.should_sync == 'true'
              run: |
                  # Configure Git user for creating commits/branches
                  git config --global user.name "github-actions[bot]"
                  git config --global user.email "github-actions[bot]@users.noreply.github.com"

            - name: Check if main is already an ancestor of develop
              id: check-already-merged
              if: steps.check-squash-merge.outputs.should_sync == 'true'
              run: |
                  git fetch origin develop
                  # Check if all commits on main are already included in develop
                  if git merge-base --is-ancestor origin/main origin/develop; then
                    echo "Main branch changes are already included in develop. No sync needed."
                    echo "already_merged=true" >> $GITHUB_OUTPUT
                  else
                    echo "Main has changes that develop doesn't have. Sync needed."
                    echo "already_merged=false" >> $GITHUB_OUTPUT
                  fi

            - name: Check if a sync PR already exists
              id: check-existing-pr
              if: steps.check-squash-merge.outputs.should_sync == 'true' && steps.check-already-merged.outputs.already_merged == 'false'
              run: |
                  # Check for existing open PRs from our sync branch to develop
                  EXISTING_PR=$(gh pr list --base develop --head sync-main-to-develop --state open --json number --jq '.[0].number // empty')
                  if [[ -n "$EXISTING_PR" ]]; then
                    echo "pr_exists=true" >> "$GITHUB_OUTPUT"
                    echo "existing_pr_number=$EXISTING_PR" >> "$GITHUB_OUTPUT"
                    echo "ℹ️ Found existing sync PR: #$EXISTING_PR"
                  else
                    echo "pr_exists=false" >> "$GITHUB_OUTPUT"
                    echo "ℹ️ No existing sync PR found"
                  fi
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Create or update sync branch
              if: steps.check-squash-merge.outputs.should_sync == 'true' && steps.check-already-merged.outputs.already_merged == 'false'
              run: |
                  SYNC_BRANCH="sync-main-to-develop"

                  # Fetch latest changes
                  git fetch origin main develop

                  # Create or reset the sync branch to match main
                  if git ls-remote --heads origin $SYNC_BRANCH | grep -q $SYNC_BRANCH; then
                    echo "Updating existing sync branch '$SYNC_BRANCH'"
                    git checkout -B $SYNC_BRANCH origin/main
                  else
                    echo "Creating new sync branch '$SYNC_BRANCH' from main"
                    git checkout -b $SYNC_BRANCH origin/main
                  fi

                  # Push the sync branch
                  git push origin $SYNC_BRANCH --force-with-lease
                  echo "✅ Sync branch updated with latest main changes"

            - name: Create new sync Pull Request
              if: steps.check-squash-merge.outputs.should_sync == 'true' && steps.check-already-merged.outputs.already_merged == 'false' && steps.check-existing-pr.outputs.pr_exists == 'false'
              run: |
                  # Get commit information for PR details
                  LATEST_COMMIT_MSG=$(git log -1 --pretty=format:"%s")
                  LATEST_COMMIT_SHA=$(git rev-parse --short HEAD)
                  CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | head -10 | tr '\n' ', ' | sed 's/,$//')

                  # Create PR title and body
                  PR_TITLE="🔄 Sync: Merge main changes back to develop"

                  PR_BODY="## 🔄 Automatic Sync from Main to Develop

                  This PR automatically syncs the latest changes from \`main\` back to \`develop\` branch.
                  This is necessary after a squash merge to ensure \`develop\` stays up-to-date with \`main\`.

                  ### 📝 Latest Changes from Main
                  **Commit:** \`${LATEST_COMMIT_SHA}\` - ${LATEST_COMMIT_MSG}

                  ### 📁 Modified Files
                  ${CHANGED_FILES}

                  ### 🤖 Automation Details
                  - **Triggered by:** Push to main branch
                  - **Source:** \`main\` branch
                  - **Target:** \`develop\` branch
                  - **Strategy:** Merge commit (preserves history)

                  ### ✅ Next Steps
                  1. Review the changes to ensure they're appropriate for develop
                  2. Check for any conflicts and resolve if necessary
                  3. Merge this PR to complete the sync

                  ---
                  *This PR was automatically created by GitHub Actions*"

                  # Create the Pull Request
                  PR_URL=$(gh pr create \
                    --title "$PR_TITLE" \
                    --body "$PR_BODY" \
                    --base develop \
                    --head sync-main-to-develop \
                    --reviewer "${{ github.actor }}")

                  echo "✅ Created sync PR: $PR_URL"

                  # Add labels if they exist
                  PR_NUMBER=$(echo "$PR_URL" | sed 's/.*\/pull\/\([0-9]*\).*/\1/')
                  gh pr edit $PR_NUMBER --add-label "sync" 2>/dev/null || echo "Note: 'sync' label not found"
                  gh pr edit $PR_NUMBER --add-label "automated" 2>/dev/null || echo "Note: 'automated' label not found"
                  gh pr edit $PR_NUMBER --add-label "main-to-develop" 2>/dev/null || echo "Note: 'main-to-develop' label not found"
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Update existing sync Pull Request
              if: steps.check-squash-merge.outputs.should_sync == 'true' && steps.check-already-merged.outputs.already_merged == 'false' && steps.check-existing-pr.outputs.pr_exists == 'true'
              run: |
                  LATEST_COMMIT_MSG=$(git log -1 --pretty=format:"%s")
                  LATEST_COMMIT_SHA=$(git rev-parse --short HEAD)
                  PR_NUMBER="${{ steps.check-existing-pr.outputs.existing_pr_number }}"

                  # Add update comment to existing PR
                  gh pr comment $PR_NUMBER --body "🔄 **Sync branch updated with new changes from main**

                  **New commit:** \`${LATEST_COMMIT_SHA}\` - ${LATEST_COMMIT_MSG}
                  **Updated at:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')

                  The sync branch has been updated to include the latest changes from main. Please review any new changes or conflicts."

                  echo "✅ Updated existing sync PR #$PR_NUMBER"
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Summary
              if: steps.check-squash-merge.outputs.should_sync == 'true'
              run: |
                  if [[ "${{ steps.check-already-merged.outputs.already_merged }}" == "true" ]]; then
                    echo "✅ No sync needed - develop is already up to date with main"
                  elif [[ "${{ steps.check-existing-pr.outputs.pr_exists }}" == "true" ]]; then
                    echo "✅ Updated existing sync PR #${{ steps.check-existing-pr.outputs.existing_pr_number }}"
                  else
                    echo "✅ Created new sync PR to merge main changes to develop"
                  fi

            - name: No sync needed
              if: steps.check-squash-merge.outputs.should_sync == 'false'
              run: |
                  echo "ℹ️ No sync needed - this push doesn't appear to be a squash merge from develop"

            - name: Handle failure
              if: failure() && steps.check-squash-merge.outputs.should_sync == 'true'
              run: |
                  echo "❌ Failed to create/update sync PR from main to develop"

                  # Create an issue for manual intervention
                  gh issue create \
                    --title "🚨 Failed to sync main to develop" \
                    --body "The automatic sync from \`main\` to \`develop\` failed.

                    **Failure Details:**
                    - **Time:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
                    - **Workflow:** ${{ github.workflow }}
                    - **Run:** https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
                    - **Triggered by:** ${{ github.actor }}

                    **Manual Action Required:**
                    Please manually create a PR to sync main changes to develop or investigate the failure.

                    **Latest Main Commit:** \`$(git log -1 --pretty=format:'%h - %s')\`" \
                    --label "bug,sync-failure,needs-attention" \
                    --assignee "${{ github.actor }}" 2>/dev/null || echo "Could not create issue or assign"
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
