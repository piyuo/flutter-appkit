# .github/workflows/auto-merge-to-develop.yml
name: Auto Sync Main to Develop (Release-Please Triggered)

on:
    push:
        branches:
            - main # This workflow triggers when new commits are pushed to 'main'

jobs:
    sync-branches:
        runs-on: ubuntu-latest
        # Give workflow necessary permissions
        permissions:
            contents: write # For git push
            pull-requests: write # For gh pr create/edit/comment
            issues: write # For gh issue create (on failure)

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0 # Fetch full history including tags
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Check if this is a release-please merge
              id: check-release-please
              run: |
                  # Get the latest commits on main
                  LATEST_COMMIT_SHA=$(git rev-parse HEAD)
                  LATEST_COMMIT_MSG=$(git log -1 --pretty=format:"%s")
                  LATEST_COMMIT_BODY=$(git log -1 --pretty=format:"%b")
                  echo "Latest commit message on main: ${LATEST_COMMIT_MSG}"
                  echo "Latest commit SHA: ${LATEST_COMMIT_SHA}"
                  echo "Latest commit body: ${LATEST_COMMIT_BODY}"

                  # Fetch develop branch for comparison
                  git fetch origin develop

                  should_sync=false

                  # Method 1: Check if this looks like our own sync commit to avoid loops
                  if echo "$LATEST_COMMIT_MSG" | grep -iqE "sync.*main.*develop|auto.*merge|automatic.*sync|^Merge.*develop"; then
                    echo "! This looks like our own sync commit, skipping to avoid loops"
                    should_sync=false

                  # Method 2: STRICT CHECK - Must be a release-please commit
                  elif echo "$LATEST_COMMIT_MSG" | grep -qE "^chore\(main\): release"; then
                    echo "‚úì This is a release-please commit: ${LATEST_COMMIT_MSG}"

                    # Additional validation: check if commit body contains release-please indicators
                    if echo "$LATEST_COMMIT_BODY" | grep -qE "(Release-as:|Co-authored-by: release-please|PiperOrigin-RevId:)"; then
                      echo "‚úì Confirmed release-please commit by body content"
                      should_sync=true
                    elif echo "$LATEST_COMMIT_MSG" | grep -qE "^chore\(main\): release [0-9]+\.[0-9]+\.[0-9]+"; then
                      echo "‚úì Confirmed release-please commit by version pattern"
                      should_sync=true
                    else
                      echo "? Looks like release-please but missing typical indicators, proceeding anyway"
                      should_sync=true
                    fi

                    # Check if main has commits that develop doesn't have
                    COMMITS_AHEAD=$(git rev-list --count origin/develop..HEAD)
                    echo "Main is ${COMMITS_AHEAD} commits ahead of develop"

                    if [ "$COMMITS_AHEAD" -eq 0 ]; then
                      echo "! No new commits to sync, even though this is a release commit"
                      should_sync=false
                    fi

                  # Method 3: Also check for alternative release-please patterns
                  elif echo "$LATEST_COMMIT_MSG" | grep -qiE "^(release|chore): (release|version|bump)"; then
                    echo "‚úì This appears to be a release commit with alternative pattern: ${LATEST_COMMIT_MSG}"

                    COMMITS_AHEAD=$(git rev-list --count origin/develop..HEAD)
                    echo "Main is ${COMMITS_AHEAD} commits ahead of develop"

                    if [ "$COMMITS_AHEAD" -gt 0 ]; then
                      should_sync=true
                    else
                      should_sync=false
                    fi

                  else
                    echo "! This is NOT a release-please commit, skipping sync"
                    echo "  Commit message: ${LATEST_COMMIT_MSG}"
                    echo "  Expected pattern: 'chore(main): release X.Y.Z'"
                    should_sync=false
                  fi

                  if [ "$should_sync" = true ]; then
                    echo "should_sync=true" >> $GITHUB_OUTPUT
                    echo "commits_ahead=$COMMITS_AHEAD" >> $GITHUB_OUTPUT
                    echo "release_commit_msg=$LATEST_COMMIT_MSG" >> $GITHUB_OUTPUT
                    echo "üîÑ Will sync release changes to develop"
                  else
                    echo "should_sync=false" >> $GITHUB_OUTPUT
                    echo "‚è≠Ô∏è Skipping sync - not a release-please merge"
                  fi

            - name: Configure Git
              if: steps.check-release-please.outputs.should_sync == 'true'
              run: |
                  git config --global user.name "github-actions[bot]"
                  git config --global user.email "github-actions[bot]@users.noreply.github.com"

            - name: Check sync strategy needed
              id: check-strategy
              if: steps.check-release-please.outputs.should_sync == 'true'
              run: |
                  git fetch origin develop main

                  echo "Determining best sync strategy for rebase-and-merge workflow..."

                  # For rebase-and-merge, we have a few options:
                  # 1. Fast-forward develop to main (cleanest, if possible)
                  # 2. Create a merge commit (if develop has unique commits)
                  # 3. Rebase develop onto main (if we want to maintain linear history)

                  # Check if develop can be fast-forwarded to main
                  if git merge-base --is-ancestor origin/develop origin/main; then
                    echo "sync_strategy=fast-forward" >> $GITHUB_OUTPUT
                    echo "‚úÖ Can fast-forward develop to main (cleanest option)"
                  else
                    # Develop has commits that main doesn't have
                    DEVELOP_UNIQUE=$(git rev-list --count origin/main..origin/develop)
                    echo "Develop has ${DEVELOP_UNIQUE} unique commits"

                    if [ "$DEVELOP_UNIQUE" -gt 0 ]; then
                      echo "sync_strategy=merge" >> $GITHUB_OUTPUT
                      echo "‚ö†Ô∏è Develop has unique commits, will create merge commit"
                    else
                      echo "sync_strategy=fast-forward" >> $GITHUB_OUTPUT
                      echo "‚úÖ Can fast-forward develop to main"
                    fi
                  fi

            - name: Check if sync PR already exists
              id: check-existing-pr
              if: steps.check-release-please.outputs.should_sync == 'true'
              run: |
                  EXISTING_PR=$(gh pr list --base develop --head sync-main-to-develop --state open --json number --jq '.[0].number // empty')
                  if [[ -n "$EXISTING_PR" ]]; then
                    echo "pr_exists=true" >> "$GITHUB_OUTPUT"
                    echo "existing_pr_number=$EXISTING_PR" >> "$GITHUB_OUTPUT"
                    echo "‚ÑπÔ∏è Found existing sync PR: #$EXISTING_PR"
                  else
                    echo "pr_exists=false" >> "$GITHUB_OUTPUT"
                    echo "‚ÑπÔ∏è No existing sync PR found"
                  fi
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Create sync branch
              if: steps.check-release-please.outputs.should_sync == 'true'
              run: |
                  SYNC_BRANCH="sync-main-to-develop"
                  SYNC_STRATEGY="${{ steps.check-strategy.outputs.sync_strategy }}"

                  # Clean up any existing sync branch
                  git push origin --delete $SYNC_BRANCH 2>/dev/null || echo "Remote sync branch doesn't exist"
                  git branch -D $SYNC_BRANCH 2>/dev/null || echo "Local sync branch doesn't exist"

                  # Fetch latest state
                  git fetch origin main develop

                  if [[ "$SYNC_STRATEGY" == "fast-forward" ]]; then
                    echo "üîÑ Using fast-forward strategy (cleanest for rebase workflow)"

                    # Create branch from main (since we're fast-forwarding develop to main)
                    git checkout -b $SYNC_BRANCH origin/main

                    echo "üìù Sync branch created - will fast-forward develop to main"

                  else
                    echo "üîÑ Using merge strategy (develop has unique commits)"

                    # Create branch from develop and merge main
                    git checkout -b $SYNC_BRANCH origin/develop
                    git merge origin/main --no-ff -m "Sync: merge latest release changes into develop

                    This merge brings the latest release from main into develop.
                    Release commit: ${{ steps.check-release-please.outputs.release_commit_msg }}

                    Auto-generated by GitHub Actions after release-please merge."

                    echo "üìù Sync branch created by merging main into develop"
                  fi

                  # Push the sync branch
                  git push origin $SYNC_BRANCH
                  echo "‚úÖ Sync branch created and pushed"

            - name: Create new sync Pull Request
              if: steps.check-release-please.outputs.should_sync == 'true' && steps.check-existing-pr.outputs.pr_exists == 'false'
              run: |
                  LATEST_COMMIT_MSG="${{ steps.check-release-please.outputs.release_commit_msg }}"
                  LATEST_COMMIT_SHA=$(git rev-parse --short origin/main)
                  SYNC_STRATEGY="${{ steps.check-strategy.outputs.sync_strategy }}"
                  COMMITS_AHEAD="${{ steps.check-release-please.outputs.commits_ahead }}"

                  # Get release version from commit message if possible
                  RELEASE_VERSION=$(echo "$LATEST_COMMIT_MSG" | sed -n 's/^chore(main): release \([0-9]*\.[0-9]*\.[0-9]*\).*/\1/p' || echo "unknown")

                  # Get list of new commits for PR description
                  NEW_COMMITS_LIST=$(git log --oneline origin/develop..origin/main | head -5)

                  # Create appropriate PR title and body based on strategy
                  if [[ "$SYNC_STRATEGY" == "fast-forward" ]]; then
                    PR_TITLE="üöÄ Sync: Update develop with release ${RELEASE_VERSION}"
                    STRATEGY_DESC="**Fast-Forward Strategy** - Develop will be updated to match main exactly after release"
                  else
                    PR_TITLE="üöÄ Sync: Merge release ${RELEASE_VERSION} to develop"
                    STRATEGY_DESC="**Merge Strategy** - Release changes merged into develop (preserves both histories)"
                  fi

                  PR_BODY="## üöÄ Automatic Sync After Release

                  This PR automatically syncs the latest **release** from \`main\` to \`develop\` branch.
                  This ensures develop stays up-to-date with the released version.

                  ### üè∑Ô∏è Release Information
                  **Release Version:** \`${RELEASE_VERSION}\`
                  **Release Commit:** \`${LATEST_COMMIT_SHA}\` - ${LATEST_COMMIT_MSG}
                  **Commits to Sync:** ${COMMITS_AHEAD} commits

                  ### üìù Recent Commits from Main
                  \`\`\`
                  ${NEW_COMMITS_LIST}
                  \`\`\`

                  ### üõ†Ô∏è Sync Strategy
                  ${STRATEGY_DESC}

                  ### ü§ñ Automation Details
                  - **Triggered by:** Release-please merge to main
                  - **Source:** \`main\` branch (post-release)
                  - **Target:** \`develop\` branch
                  - **Workflow:** Release-triggered sync

                  ### ‚úÖ Next Steps
                  1. **Verify the release version** matches expectations
                  2. **Review the release changes** being synced
                  3. **Merge this PR** to complete the post-release sync

                  > **Note:** This sync is automatically triggered only when release-please merges a release commit to main, ensuring develop stays current with released versions.

                  ---
                  *This PR was automatically created by GitHub Actions after release-please*"

                  # Create the Pull Request
                  PR_URL=$(gh pr create \
                    --title "$PR_TITLE" \
                    --body "$PR_BODY" \
                    --base develop \
                    --head sync-main-to-develop \
                    --reviewer "${{ github.actor }}")

                  echo "‚úÖ Created sync PR: $PR_URL"

                  # Add labels
                  PR_NUMBER=$(echo "$PR_URL" | sed 's/.*\/pull\/\([0-9]*\).*/\1/')
                  gh pr edit $PR_NUMBER --add-label "sync" 2>/dev/null || true
                  gh pr edit $PR_NUMBER --add-label "automated" 2>/dev/null || true
                  gh pr edit $PR_NUMBER --add-label "release-sync" 2>/dev/null || true
                  gh pr edit $PR_NUMBER --add-label "post-release" 2>/dev/null || true

                  if [[ "$SYNC_STRATEGY" == "fast-forward" ]]; then
                    gh pr edit $PR_NUMBER --add-label "fast-forward" 2>/dev/null || true
                  fi
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Update existing sync Pull Request
              if: steps.check-release-please.outputs.should_sync == 'true' && steps.check-existing-pr.outputs.pr_exists == 'true'
              run: |
                  LATEST_COMMIT_MSG="${{ steps.check-release-please.outputs.release_commit_msg }}"
                  LATEST_COMMIT_SHA=$(git rev-parse --short origin/main)
                  PR_NUMBER="${{ steps.check-existing-pr.outputs.existing_pr_number }}"
                  SYNC_STRATEGY="${{ steps.check-strategy.outputs.sync_strategy }}"
                  RELEASE_VERSION=$(echo "$LATEST_COMMIT_MSG" | sed -n 's/^chore(main): release \([0-9]*\.[0-9]*\.[0-9]*\).*/\1/p' || echo "unknown")

                  gh pr comment $PR_NUMBER --body "üöÄ **Sync branch updated with new release**

                  **Release Version:** ${RELEASE_VERSION}
                  **Release Commit:** \`${LATEST_COMMIT_SHA}\` - ${LATEST_COMMIT_MSG}
                  **Updated at:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
                  **Strategy:** ${SYNC_STRATEGY}

                  The sync branch has been recreated to include the latest release from main."

                  echo "‚úÖ Updated existing sync PR #$PR_NUMBER"
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Summary
              if: steps.check-release-please.outputs.should_sync == 'true'
              run: |
                  SYNC_STRATEGY="${{ steps.check-strategy.outputs.sync_strategy }}"
                  if [[ "${{ steps.check-existing-pr.outputs.pr_exists }}" == "true" ]]; then
                    echo "‚úÖ Updated existing sync PR #${{ steps.check-existing-pr.outputs.existing_pr_number }} using ${SYNC_STRATEGY} strategy"
                  else
                    echo "‚úÖ Created new sync PR using ${SYNC_STRATEGY} strategy (triggered by release-please)"
                  fi

            - name: No sync needed
              if: steps.check-release-please.outputs.should_sync == 'false'
              run: |
                  echo "‚ÑπÔ∏è No sync needed - this is not a release-please merge to main"

            - name: Handle failure
              if: failure() && steps.check-release-please.outputs.should_sync == 'true'
              run: |
                  echo "‚ùå Failed to create/update sync PR from main to develop"

                  gh issue create \
                    --title "üö® Failed to sync release to develop" \
                    --body "The automatic sync from \`main\` to \`develop\` failed after a release-please merge.

                    **Failure Details:**
                    - **Time:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
                    - **Workflow:** ${{ github.workflow }}
                    - **Run:** https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
                    - **Triggered by:** Release-please merge by ${{ github.actor }}
                    - **Release commit:** ${{ steps.check-release-please.outputs.release_commit_msg }}

                    **Manual Action Required:**
                    Please manually sync the release changes to develop or investigate the failure.

                    **Release Commit:**
                    \`\`\`
                    $(git log --oneline -1 origin/main)
                    \`\`\`

                    **Recommended Solutions:**
                    1. Fast-forward develop to main: \`git checkout develop && git merge --ff-only main\`
                    2. Create merge commit if develop has unreleased work
                    3. Verify release-please integration is working correctly" \
                    --label "bug,sync-failure,release-sync,urgent" \
                    --assignee "${{ github.actor }}" 2>/dev/null || echo "Could not create issue"
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
