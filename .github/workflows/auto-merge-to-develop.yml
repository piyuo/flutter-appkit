# .github/workflows/auto-merge-to-develop.yml
name: Auto Create PR to Merge Main to Develop

on:
    push:
        branches:
            - main # This workflow triggers when new commits are pushed to 'main'

jobs:
    create-merge-pr:
        runs-on: ubuntu-latest
        # Give workflow necessary permissions
        permissions:
            contents: write # For git push
            pull-requests: write # For gh pr create/edit/comment
            issues: write # For gh issue create (on failure)

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0 # Fetch full history including tags
                  token: ${{ secrets.GITHUB_TOKEN }} # Use GITHUB_TOKEN for operations

            - name: Check if main's latest commit triggers sync
              id: check-commit
              run: |
                  # Get the latest commit message on main branch
                  LATEST_COMMIT_MSG=$(git log -1 --pretty=format:"%s")
                  echo "Latest commit message on main: ${LATEST_COMMIT_MSG}"

                  # Define keywords to look for (case-insensitive)
                  # We're checking if the commit message indicates a release.
                  # This could be from release-please's "chore(...): release X.Y.Z" commit
                  # or any other commit that signals a main branch release or milestone.
                  if echo "$LATEST_COMMIT_MSG" | grep -iqE "Release|Milestone"; then
                    echo "should_sync=true" >> $GITHUB_OUTPUT
                    echo "‚úÖ Found 'Release' or 'Milestone' keyword in latest commit message. Will create merge PR."
                  else
                    echo "should_sync=false" >> $GITHUB_OUTPUT
                    echo "‚ÑπÔ∏è Latest commit on main does not contain 'Release' or 'Milestone' keyword. Skipping sync."
                  fi

            - name: Configure Git
              if: steps.check-commit.outputs.should_sync == 'true'
              run: |
                  # Configure Git user for creating commits/branches
                  git config --global user.name "github-actions[bot]"
                  git config --global user.email "github-actions[bot]@users.noreply.github.com"

            - name: Check if main is already an ancestor of develop (main already merged into develop)
              id: check-already-merged
              if: steps.check-commit.outputs.should_sync == 'true'
              run: |
                  git fetch origin # Ensure we have latest remote refs
                  # Check if origin/main's HEAD is an ancestor of origin/develop's HEAD.
                  # If true, it means all commits on main are already included in develop.
                  if git merge-base --is-ancestor origin/main origin/develop; then
                    echo "Main branch's history is already fully included in develop. No PR needed."
                    echo "already_merged=true" >> $GITHUB_OUTPUT
                  else
                    echo "Main branch's history is not fully included in develop. A PR might be needed."
                    echo "already_merged=false" >> $GITHUB_OUTPUT
                  fi

            - name: Check if a PR for merging main to develop already exists
              id: check-existing-pr
              if: steps.check-commit.outputs.should_sync == 'true' && steps.check-already-merged.outputs.already_merged == 'false'
              run: |
                  # Use GitHub CLI to list open PRs from the dedicated merge branch to develop
                  EXISTING_PR=$(gh pr list --base develop --head release-merge-to-develop --state open --json number --jq '.[0].number')
                  if [[ -n "$EXISTING_PR" && "$EXISTING_PR" != "null" ]]; then
                    echo "pr_exists=true" >> "$GITHUB_OUTPUT"
                    echo "existing_pr_number=$EXISTING_PR" >> "$GITHUB_OUTPUT"
                    echo "‚ÑπÔ∏è An open PR for main to develop sync already exists: #$EXISTING_PR"
                  else
                    echo "pr_exists=false" >> "$GITHUB_OUTPUT"
                    echo "‚ÑπÔ∏è No existing open PR found for main to develop sync."
                  fi
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GH_TOKEN needed for gh CLI commands

            - name: Create or update temporary merge branch for PR
              if: steps.check-commit.outputs.should_sync == 'true' && steps.check-already-merged.outputs.already_merged == 'false'
              run: |
                  BRANCH_NAME="release-merge-to-develop"

                  # Ensure we have the latest 'main' branch
                  git fetch origin main:main

                  # Check if the temporary branch exists remotely
                  if git ls-remote --heads origin $BRANCH_NAME | grep -q $BRANCH_NAME; then
                    echo "Temporary branch '$BRANCH_NAME' already exists. Updating it."
                    git checkout $BRANCH_NAME
                    git pull origin $BRANCH_NAME --rebase # Rebase to pull latest changes from remote
                    git reset --hard origin/main # Force branch to match main's HEAD
                  else
                    echo "Creating new temporary branch '$BRANCH_NAME' from origin/main."
                    git checkout -b $BRANCH_NAME origin/main
                  fi

                  # Force push the branch to remote.
                  # --force-with-lease is safer than --force as it won't overwrite others' work.
                  git push origin $BRANCH_NAME --force-with-lease

            - name: Create Pull Request from temporary branch to develop
              if: steps.check-commit.outputs.should_sync == 'true' && steps.check-already-merged.outputs.already_merged == 'false' && steps.check-existing-pr.outputs.pr_exists == 'false'
              run: |
                  # Get latest commit message from main for the PR title/body
                  COMMIT_MSG=$(git log -1 origin/main --pretty=format:"%s")
                  # Attempt to extract version, robust to different release-please messages
                  VERSION=$(echo "$COMMIT_MSG" | sed -n 's/^chore.*: release \(v\{0,1\}[0-9.]*\).*/\1/p' || \
                            echo "$COMMIT_MSG" | sed -n 's/.*Release \(v\{0,1\}[0-9.]*\).*/\1/p')

                  PR_TITLE="üöÄ Auto-merge: Sync main to develop"
                  if [[ -n "$VERSION" ]]; then
                    PR_TITLE="üöÄ Auto-merge: Release $VERSION sync from main to develop"
                  fi

                  PR_BODY="## üìã Summary
                  This Pull Request automatically syncs the latest **release changes** from the \`main\` branch back to the \`develop\` branch.
                  This ensures the \`develop\` branch's history includes the consolidated changes and version bumps that were squashed onto \`main\`.

                  ## üîÑ Changes Included
                  - Latest changes from \`main\` branch, reflecting the recent release/milestone.
                  - Updates to \`CHANGELOG.md\` and version files (if applicable) that were part of the release.

                  ## ü§ñ Automation Details
                  This PR was automatically created by the workflow triggered by a 'Release' or 'Milestone' commit on \`main\`.

                  **Latest Main Commit:** \`${COMMIT_MSG}\`
                  **Main Commit SHA:** \`$(git rev-parse --short origin/main)\`
                  **PR Branch:** \`release-merge-to-develop\`"

                  # Create the Pull Request
                  PR_URL=$(gh pr create \
                    --title "$PR_TITLE" \
                    --body "$PR_BODY" \
                    --base develop \
                    --head release-merge-to-develop)

                  echo "Created PR: $PR_URL"

                  # Try to add labels (ignore if they don't exist)
                  PR_NUMBER=$(echo "$PR_URL" | sed 's/.*\/pull\/\([0-9]*\).*/\1/')
                  gh pr edit $PR_NUMBER --add-label "automated" 2>/dev/null || echo "‚ö†Ô∏è 'automated' label not found, skipping"
                  gh pr edit $PR_NUMBER --add-label "sync" 2>/dev/null || echo "‚ö†Ô∏è 'sync' label not found, skipping"
                  gh pr edit $PR_NUMBER --add-label "release-sync" 2>/dev/null || echo "‚ö†Ô∏è 'release-sync' label not found, skipping"
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Update existing Pull Request
              if: steps.check-commit.outputs.should_sync == 'true' && steps.check-already-merged.outputs.already_merged == 'false' && steps.check-existing-pr.outputs.pr_exists == 'true'
              run: |
                  # Get latest commit message from main for the PR comment
                  COMMIT_MSG=$(git log -1 origin/main --pretty=format:"%s")
                  PR_NUMBER="${{ steps.check-existing-pr.outputs.existing_pr_number }}"

                  # Add a comment to the existing PR, indicating an update
                  gh pr comment $PR_NUMBER --body "üîÑ **Updated with latest release changes from \`main\`**

                  New commit on \`main\`: \`${COMMIT_MSG}\`
                  Updated at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')

                  Please re-review and resolve any new conflicts."

                  echo "‚úÖ Updated existing PR #$PR_NUMBER with latest changes from main."
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Success notification
              if: success() && steps.check-commit.outputs.should_sync == 'true' && steps.check-already-merged.outputs.already_merged == 'false'
              run: |
                  if [[ "${{ steps.check-existing-pr.outputs.pr_exists }}" == "true" ]]; then
                    echo "‚úÖ Workflow completed: Updated existing PR for merging main to develop."
                  else
                    echo "‚úÖ Workflow completed: Created new PR for merging main to develop."
                  fi

            - name: Already up to date notification
              if: steps.check-already-merged.outputs.already_merged == 'true'
              run: |
                  echo "‚ÑπÔ∏è Workflow skipped: Main branch's history is already fully included in develop."

            - name: Sync skipped notification (no trigger commit)
              if: steps.check-commit.outputs.should_sync == 'false'
              run: |
                  echo "‚ÑπÔ∏è Workflow skipped: Latest commit on main does not trigger an auto-sync to develop."

            - name: Handle workflow failure (create GitHub Issue)
              if: failure() && steps.check-commit.outputs.should_sync == 'true'
              run: |
                  echo "‚ùå Workflow failed: Unable to create/update merge PR from main to develop. Check logs for details."

                  # Optionally create an issue for manual intervention if the PR creation/update fails.
                  # This requires 'issues: write' permission for GITHUB_TOKEN.
                  gh issue create \
                    --title "üö® Auto-merge main to develop failed" \
                    --body "The automatic synchronization Pull Request from \`main\` to \`develop\` failed to be created or updated. Manual intervention is required.

                    **Failed at:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
                    **Workflow:** ${{ github.workflow }}
                    **Run:** ${{ github.run_id }}
                    **Source Branch:** \`main\`
                    **Target Branch:** \`develop\`" \
                    --label "bug" \
                    --label "automated" || true \
                    --assignee "${{ github.actor }}" || true # Assign to the person who triggered (pushed to main)
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GH_TOKEN needed for gh CLI commands
