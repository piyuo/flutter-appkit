import 'package:flutter/material.dart';
import 'package:easy_refresh/easy_refresh.dart';
import 'package:provider/provider.dart';
import 'load_more.dart';
//import 'package:easy_load_more/easy_load_more.dart';
//import 'package:loading_more_list/loading_more_list.dart';
//import 'package:loadmore/loadmore.dart';
//import 'package:loadmore_listview/loadmore_listview.dart';

EasyRefreshController _controller = EasyRefreshController(
//  controlFinishRefresh: true,
  controlFinishLoad: true,
);

class PullToRefreshProvider with ChangeNotifier {
  /*EasyRefreshController controller = EasyRefreshController(
    controlFinishRefresh: true,
    controlFinishLoad: true,
  );*/
}

/// PullToRefresh support pull down refresh and pull up load more
class PullToRefresh extends StatelessWidget {
  /// ```dart
  ///  PullToRefresh(
  ///   scrollController: _scrollController,
  ///   onRefresh: () async {},
  ///   onLoadMore: () async {},
  ///   child: ListView.builder(...),
  /// )
  /// ```
  const PullToRefresh({
    required this.child,
    Key? key,
    this.onRefresh,
    this.onLoadMore,
    this.scrollController,
  }) : super(key: key);

  /// onRefresh is the callback function when user refresh the list
  final Future<void> Function()? onRefresh;

  /// ondLoadMore is the callback function when user load more the list
  final Future<void> Function()? onLoadMore;

  /// scrollController is the scroll controller of the refresh panel
  final ScrollController? scrollController;

  final Widget child;

  @override
  Widget build(BuildContext context) {
    /* LoadMore(
                  onLoadMore: () async {
                    pullToRefreshProvider.refresh();
                    await Future.delayed(const Duration(seconds: 2));
                    for (var i = 1; i < 11; ++i) {
                      list.add(list.length + i);
                    }
                    pullToRefreshProvider.refresh();
                  },
                  status: LoadMoreStatus.normal,
                  footerHeight: 40,
                  loadingMsg: 'Loading...',
//                  endLoadMore: true,
                  bottomTriggerDistance: 200,
                  child: CustomScrollView(
                    slivers: <Widget>[
                      SliverList(
                        delegate: SliverChildBuilderDelegate(
                          (BuildContext context, int index) {
                            return _buildItem(index);
                          },
                          childCount: list.length,
                        ),
                      ),
                    ],
                  ),
                ) */
    return ChangeNotifierProvider<PullToRefreshProvider>(
        create: (context) => PullToRefreshProvider(),
        child: Consumer<PullToRefreshProvider>(builder: (context, pullToRefreshProvider, _) => Container()));

/*
    return ChangeNotifierProvider<PullToRefreshProvider>(
        create: (context) => PullToRefreshProvider(),
        child: Consumer<PullToRefreshProvider>(
            builder: (context, pullToRefreshProvider, _) => EasyLoadMore(
                  isFinished: false,
                  runOnEmptyResult: false,
                  onLoadMore: () async {
                    await onLoadMore?.call();
                    //pullToRefreshProvider.refresh();
                    return true;
                  },
                  child: child,
                )));
*/
    /*
    if (!context.isTouchSupported || (onRefresh == null && onLoadMore == null)) {
      return child;
    }
    return ChangeNotifierProvider<PullToRefreshProvider>(
        create: (context) => PullToRefreshProvider(),
        child: Consumer<PullToRefreshProvider>(
            builder: (context, pullToRefreshProvider, child) => EasyRefresh(
                  controller: pullToRefreshProvider.controller,
                  //set header or footer to null if no onRefresh or onLoad, will force list bounce
                  header: onRefresh != null
                      ? CupertinoHeader(
                          foregroundColor: Theme.of(context).colorScheme.primary,
                          backgroundColor: Theme.of(context).colorScheme.surfaceVariant,
                        )
                      : null,
                  footer: onLoadMore != null
                      ? CupertinoFooter(foregroundColor: Theme.of(context).colorScheme.primary)
                      : null,
                  onRefresh: () async {
                    await onRefresh?.call();
                    pullToRefreshProvider.controller.finishRefresh();
                  },
                  onLoad: () async {
                    await onLoadMore?.call();
                    pullToRefreshProvider.controller.finishLoad(IndicatorResult.success);
                    pullToRefreshProvider.refresh();
                  },
                  scrollController: scrollController,
                  child: child,
                )));

    */
    final List<String> items = <String>['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N'];

    return EasyRefresh.builder(
        //controller: _controller,
        //set header or footer to null if no onRefresh or onLoad, will force list bounce
        header: onRefresh != null
            ? CupertinoHeader(
                foregroundColor: Theme.of(context).colorScheme.primary,
                backgroundColor: Theme.of(context).colorScheme.surfaceVariant,
              )
            : null,
        footer: onLoadMore != null ? CupertinoFooter(foregroundColor: Theme.of(context).colorScheme.primary) : null,
        onRefresh: () async {
          await onRefresh?.call();
          //pullToRefreshProvider.controller.finishRefresh();
        },
        onLoad: () async {
//        await onLoadMore?.call();
          await Future.delayed(const Duration(seconds: 2));
          //pullToRefreshProvider.refresh();
          return IndicatorResult.none;
        },
        scrollController: scrollController,
        //child: child,
        childBuilder: (context, physics) {
          return ListView.builder(
            physics: physics,
            controller: scrollController,
            itemCount: items.length,
            itemBuilder: (BuildContext context, int index) {
              final String item = items[index];
              return ListTile(
                isThreeLine: true,
                leading: CircleAvatar(child: Text(item)),
                title: Text('This item represents $item.'),
                subtitle: const Text('Even more additional list item information appears on line three'),
              );
            },
          );
        });
  }
}

/*
  /// _busy is true will not execute onRefresh or onLoad
  bool _busy = false;

    int itemCount = itemCount + (onRefresh != null ? 1 : 0) + (onLoadMore != null ? 1 : 0);
    Widget button(String text, Future<void> Function() callback) => TextButton.icon(
          label: Text(text, style: const TextStyle(color: Colors.grey)),
          icon: const Icon(Icons.refresh, color: Colors.grey),
          onPressed: () async {
            setState(() => _busy = true);
            try {
              await callback();
            } finally {
              setState(() => _busy = false);
            }
          },
        );

    Widget indicator() => Align(
        alignment: Alignment.center,
        child: SizedBox(
          height: 28,
          child: ballPulseIndicator(),
        ));

ListView.builder(
            controller: scrollController,
            itemCount: itemCount,
            itemBuilder: (BuildContext context, int index) {
              if (onRefresh != null && index == 0) {
                return Padding(
                    padding: const EdgeInsets.fromLTRB(20, 15, 20, 8),
                    child: _busy ? indicator() : button('Refresh', onRefresh!));
              }
              if (onLoadMore != null && index == itemCount - 1) {
                return Padding(
                  padding: const EdgeInsets.fromLTRB(20, 8, 20, 15),
                  child: _busy ? indicator() : button('Load more', onLoadMore!),
                );
              }
              if (onRefresh != null) {
                index--;
              }
              return itemBuilder(context, index);
            },
          )

 */
