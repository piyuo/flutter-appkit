                  testing.ExampleButton(label: 'selectable list', builder: () => _selectableList(context)),
                  testing.ExampleButton(label: 'list gallery', builder: () => _selectableList(context)),
                  testing.ExampleButton(label: 'master detail view', builder: () => _masterDetailView(context)),
                  testing.ExampleButton(label: 'selectable grid', builder: () => _selectableGrid(context)),

  Widget _selectableList(BuildContext context) {
    return Column(children: [
      Expanded(
        child: SelectableList<String>(
          headerBuilder: () => delta.SearchBox(
            controller: _searchBoxController,
          ),
          footerBuilder: () => Container(
            child: const Text('footer'),
            color: Colors.red,
          ),
          items: const ['a', 'b', 'c', 'd', 'e'],
          selectedItems: const ['b'],
          builder: (String item, bool isSelected) => Padding(
            padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 10),
            child: Text(item),
          ),
          onRefresh: () async {
            await Future.delayed(const Duration(seconds: 3));
            debugPrint('refresh');
          },
          onLoadMore: () async {
            await Future.delayed(const Duration(seconds: 3));
            debugPrint('load more');
          },
        ),
      ),
    ]);
  }

  Widget _selectableGrid(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(10),
      child: SelectableGrid<String>(
        gap: 50,
        headerBuilder: () => delta.SearchBox(
          controller: _searchBoxController,
        ),
        items: const ['a', 'b', 'c', 'd', 'e'],
        selectedItems: const ['b'],
        builder: (String item, bool isSelected) => Padding(
          padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 10),
          child: Text(item),
        ),
        labelBuilder: (String item, bool isSelected) => const Padding(
          padding: EdgeInsets.symmetric(vertical: 10, horizontal: 5),
          child: Center(child: Text('hello world')),
        ),
        onRefresh: () async {
          await Future.delayed(const Duration(seconds: 3));
          debugPrint('refresh');
        },
        onLoadMore: () async {
          await Future.delayed(const Duration(seconds: 3));
          debugPrint('load more');
        },
      ),
    );
  }

 Widget _masterDetailView(BuildContext context) {
    return MultiProvider(
        providers: [
          ChangeNotifierProvider<delta.RefreshButtonController>(
            create: (context) => delta.RefreshButtonController(),
          ),
          ChangeNotifierProvider<_SelectedController>(
            create: (context) => _SelectedController(),
          )
        ],
        child: Consumer2<_SelectedController, ViewController>(
            builder: (context, selectedController, viewController, child) => MasterDetailView<String>(
                  headerBuilder: () => delta.SearchBox(
                    prefixIcon: IconButton(
                      icon: const Icon(Icons.menu),
                      onPressed: () => showTagView<SampleFilter>(
                        context,
                        onTagSelected: (value) => debugPrint('$value selected'),
                        tags: const [
                          Tag<SampleFilter>(
                            label: 'Inbox',
                            value: SampleFilter.inbox,
                            icon: Icons.inbox,
                            count: 0,
                          ),
                          Tag<SampleFilter>(
                            label: 'VIPs',
                            value: SampleFilter.vip,
                            icon: Icons.verified_user,
                            count: 1,
                            selected: true,
                          ),
                          Tag<SampleFilter>(
                            label: 'Sent',
                            value: SampleFilter.sent,
                            icon: Icons.send,
                            count: 20,
                          ),
                          Tag<SampleFilter>(
                            label: 'All',
                            value: SampleFilter.all,
                            icon: Icons.all_inbox,
                            count: 120,
                            category: 'iCloud',
                          ),
                        ],
                      ),
                    ),
                    controller: _searchBoxController,
                  ),
                  pagingInfo: '1-6 of 6',
                  items: const ['a', 'b', 'c', 'd', 'e'],
                  selectedItems: viewController.isSelecting
                      ? selectedController.items
                      : selectedController.items.isEmpty
                          ? ['a']
                          : selectedController.items,
                  listBuilder: (String item, bool isSelected) => Padding(
                    padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 10),
                    child: Text('list:' + item),
                  ),
                  gridBuilder: (String item, bool isSelected) => Container(
                    padding: const EdgeInsets.symmetric(vertical: 80, horizontal: 10),
                    child: Text('grid:' + item),
                  ),
                  labelBuilder: (String item, bool isSelected) => const Padding(
                    padding: EdgeInsets.symmetric(vertical: 10, horizontal: 5),
                    child: Center(child: Text('hello world', style: TextStyle(color: Colors.red))),
                  ),
                  detailBuilder: (String item) => Padding(
                    padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 5),
                    child: Center(child: Text('detail view for $item')),
                  ),
                  onBarAction: (action) async {
                    debugPrint('$action pressed');
                    if (action == MasterDetailViewAction.refresh) {
                      await Future.delayed(const Duration(seconds: 10));
                    }
                  },
                  onItemSelected: (items) {
                    selectedController.items = items;
                  },
                  onItemChecked: (items) {
                    selectedController.items = items;
                  },
                  onCheckBegin: () => selectedController.items = <String>[],
                  onCheckEnd: () => selectedController.items = <String>['a'],
                  onRefresh: () async => debugPrint('refresh'),
                  onLoadMore: () async => debugPrint('load more'),
                )));
  }

import 'package:flutter/material.dart';
import 'package:libcli/delta/delta.dart' as delta;

/// ItemBuilder build item to display
typedef ItemBuilder<T> = Widget Function(T item, bool isSelected);

abstract class GridList<T> extends StatelessWidget {
  /// GridList is parent widget for list and grid, support pull refresh in mobile device
  const GridList({
    required this.items,
    required this.selectedItems,
    required this.padding,
    this.onItemSelected,
    this.onItemChecked,
    this.crossAxisCount = 1,
    this.headerBuilder,
    this.footerBuilder,
    this.multiSelect = false,
    this.onRefresh,
    this.onLoadMore,
    this.gap = 80,
    Key? key,
  }) : super(key: key);

  /// items is all items need to display
  final List<T> items;

  /// selectedItems is selected items
  final List<T> selectedItems;

  /// crossAxisCount cross item count on axis
  final int crossAxisCount;

  /// headerBuilder build header widget
  final Widget Function()? headerBuilder;

  /// footerBuilder build footer widget
  final Widget Function()? footerBuilder;

  /// onItemSelected is callback when item selected
  final void Function(List<T> items)? onItemSelected;

  /// onItemChecked is callback when item checked
  final void Function(List<T> items)? onItemChecked;

  /// onRefresh is callback when pull refresh
  final Future<void> Function()? onRefresh;

  /// onLoadMore is callback when load more
  final Future<void> Function()? onLoadMore;

  /// multiSelect is true if can multi select
  final bool multiSelect;

  /// padding is item padding
  final EdgeInsets padding;

  /// gap for grid item gap
  final double gap;

  /// buildItem is abstract method for child to build item
  Widget buildItem(BuildContext context, int itemIndex, T item, bool isSelected);

  /// buildHeader build header
  Widget buildHeader(BuildContext context);

  /// buildFooter build footer
  Widget buildFooter(BuildContext context);

  /// _rowCount is actual row count to display
  int get _rowCount {
    int count = 0;
    if (headerBuilder != null) {
      count++;
    }

    int rowCount = (items.length / crossAxisCount).ceil();
    count += rowCount;

    if (footerBuilder != null) {
      count++;
    }
    return count;
  }

  /// _buildItem is build item by itemIndex
  Widget _buildIndexItem(BuildContext context, int itemIndex) {
    final item = items[itemIndex];
    final isSelected = selectedItems.contains(item);
    if (onItemSelected != null || onItemChecked != null) {
      return GestureDetector(
        behavior: HitTestBehavior.opaque,
        onTap: () {
          if (!multiSelect) {
            if (!selectedItems.contains(item)) {
              onItemSelected?.call([item]);
            }
            return;
          }
          var newLSelected = selectedItems.toList();
          if (newLSelected.contains(item)) {
            newLSelected.remove(item);
          } else {
            newLSelected.add(item);
          }
          onItemChecked?.call(newLSelected);
        },
        child: buildItem(context, itemIndex, item, isSelected),
      );
    }
    return buildItem(context, itemIndex, item, isSelected);
  }

  /// _buildRow build row by rowIndex
  Widget _buildRow(BuildContext context, int rowIndex) {
    int lastIndex = items.length - 1;
    if (footerBuilder != null && lastIndex > 0) {
      lastIndex--;
    }

    var children = <Widget>[];
    int startIndex = rowIndex * crossAxisCount;
    final endIndex = startIndex + crossAxisCount;
    for (int i = startIndex; i < endIndex; i++) {
      children.add(
        Expanded(
          child: i <= lastIndex ? _buildIndexItem(context, i) : const SizedBox(),
        ),
      );
      if (i != endIndex - 1) {
        children.add(SizedBox(width: gap));
      }
    }

    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: children,
    );
  }

  @override
  Widget build(BuildContext context) {
    return Padding(
        padding: padding,
        child: delta.RefreshMoreView(
          onRefresh: onRefresh,
          onLoadMore: onLoadMore,
          itemCount: _rowCount,
          itemBuilder: (BuildContext context, int index) {
            int rowIndex = index;
            if (headerBuilder != null) {
              if (index == 0) {
                return buildHeader(context);
              }
              rowIndex--;
            }

            if (footerBuilder != null && index == _rowCount - 1) {
              return buildFooter(context);
            }

            if (crossAxisCount == 1) {
              return _buildIndexItem(context, rowIndex);
            }
            return _buildRow(context, rowIndex);
          },
        ));
  }
}
