import 'package:flutter/material.dart';
import 'package:oktoast/oktoast.dart';
import 'package:libcli/i18n.dart';
import 'package:piyuo/src/dialog/popup.dart';
import 'package:piyuo/src/dialog/popup-menu.dart';
import 'package:piyuo/src/dialog/message-dialog.dart';
import 'package:piyuo/src/dialog/message-toast.dart';

/// navigatorKey used in rootContext
///
final navigatorKey = new GlobalKey<NavigatorState>();

/// DialogOverlay provide overlay for dialog
///
class DialogOverlay extends StatelessWidget {
  final Widget child;

  DialogOverlay({
    required this.child,
  });

  @override
  Widget build(BuildContext context) {
    return OKToast(child: child);
  }
}

BuildContext get rootContext {
  assert(navigatorKey.currentState != null && navigatorKey.currentState!.overlay != null,
      'you need set navigatorKey: dialog.navigatorKey in MaterialApp');
  return navigatorKey.currentState!.overlay!.context;
}

/// show widget dialog
///
Future show(BuildContext context, Widget child) {
  return showDialog(
      context: context,
      builder: (BuildContext ctx) {
        return Dialog(
          insetPadding: EdgeInsets.zero,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(2.0)), //this right here
          child: child,
        );
      });
}

/// toast widget
///
void toast(BuildContext context, Widget child) {
  showToastWidget(
    child,
    dismissOtherToast: true,
    context: context,
    duration: Duration(seconds: 4),
  );
}

void hint(
  BuildContext context, {
  required String message,
  Color color = Colors.white,
  IconData? icon,
}) {
  toast(
      context,
      MessageToast(
        icon: icon,
        message: message,
        backgroundColor: Colors.black.withOpacity(0.85),
      ));
}

/// DialogError is error dialog
///
class DialogError extends StatelessWidget {
  final void Function()? onEmailLinkPressed;

  final String? errorCode;

  DialogError({
    this.onEmailLinkPressed,
    this.errorCode,
  });

  @override
  Widget build(BuildContext context) {
    return MessageDialog(
      color: Colors.red,
      icon: Icons.error_outline,
      title: 'errTitle'.i18n_,
      labelOK: 'close'.i18n_,
      onOKPressed: () => Navigator.of(context)!.pop(),
      labelLink: 'emailUs'.i18n_,
      iconLink: Icons.mail_outline,
      onLinkPressed: onEmailLinkPressed,
      message: 'errMsg'.i18n_,
      notes: errorCode != null ? 'errCode'.i18n_ + errorCode! : null,
    );
  }
}

/// error show error dialog with error code
///
Future error(
  BuildContext context, {
  required String errorCode,
}) {
  return show(
      context,
      DialogError(
        errorCode: errorCode,
      ));
}

tip(
  BuildContext context, {
  required String message,
  GlobalKey? targetKey,
  Rect? rect,
}) {
  double width = 130;
  double height = 160;
  var len = message.length;
  if (len > 50) {
    width = 160;
    height = 200;
  }
  if (len > 160) {
    width = 180;
    height = 240;
  }

  var popup = Popup(
    context: context,
    child: Container(
        alignment: Alignment.center,
        padding: EdgeInsets.all(12),
        child: Text(message, style: TextStyle(color: Colors.white))),
    itemWidth: width,
    itemHeight: height,
    backgroundColor: Colors.blue,
  );

  popup.show(widgetKey: targetKey, rect: rect);
}

void menu(
  BuildContext context, {
  required List<MenuItem> items,
  MenuClickCallback? onPressed,
  required GlobalKey targetKey,
}) {
  var menu = PopupMenu(
    context: context,
    items: items,
    onClickItem: (_) {},
  );
  menu.show(widgetKey: targetKey);
}
