import 'package:flutter_test/flutter_test.dart';
import 'package:provider/provider.dart';
import 'package:mockito/mockito.dart';
import 'package:libcli/src/dialogs/dialogs.dart' as dialogs;
import 'package:libcli/src/dialogs/mock-dialogs.dart';
import 'package:libcli/src/dialogs/popup-menu.dart';


void main() {
  final GlobalKey keyBtn = GlobalKey();
  setUp(() async {});

  Widget createSample({
    required void Function(BuildContext context, Dialogs provider) onPressed,
  }) {
    return MaterialApp(
      home: DialogOverlay(
          child: Provider(
        create: (_) => MockDialogs(),
        child: Consumer<MockDialogs>(
          builder: (context, provider, child) => FlatButton(
            key: keyBtn,
            child: Text('button'),
            onPressed: () => onPressed(context, provider),
          ),
        ),
      )),
    );
  }

  group('[mock-dialogs]', () {
    testWidgets('should get mock dialogs from context and pop menu', (WidgetTester tester) async {
      MockDialogs.didPopMenu = false;
      await tester.pumpWidget(createSample(
          onPressed: (context, provider) => provider.popMenu(context, widgetKey: keyBtn, items: [
                MenuItem(
                    id: 'home',
                    text: 'Home',
                    widget: Icon(
                      Icons.add,
                      color: Colors.white,
                    ))
              ])));
      expect(find.byType(FlatButton), findsOneWidget);
      await tester.tap(find.byType(FlatButton));
      await tester.pumpAndSettle();
      expect(MockDialogs.didPopMenu, true);
    });

    testWidgets('should tooltip', (WidgetTester tester) async {
      MockDialogs.didTooltip = false;
      await tester.pumpWidget(createSample(onPressed: (context, provider) => provider.tooltip(context, 'hi')));
      expect(find.byType(FlatButton), findsOneWidget);
      await tester.tap(find.byType(FlatButton));
      await tester.pumpAndSettle();
      expect(MockDialogs.didTooltip, true);
    });

    test('should track dialog', () async {
      var dialogs = MockDialogs();
      //alert
      MockDialogs.didAlert = false;
      dialogs.alert(MockBuildContext(), 'hi');
      expect(MockDialogs.didAlert, true);

      //confirm
      MockDialogs.didConfirm = false;
      await dialogs.confirm(MockBuildContext(), 'hi');
      expect(MockDialogs.didConfirm, true);

      //toast
      MockDialogs.didToast = false;
      dialogs.toast(MockBuildContext(), 'hi');
      expect(MockDialogs.didToast, true);
    });
  });
}
